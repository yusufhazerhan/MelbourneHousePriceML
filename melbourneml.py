# -*- coding: utf-8 -*-
"""MelbourneML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kL8c2VX8hlCpOa5Jj3ZCdjQCVMEWLZGg

# Melbourne House Prices Project

## Account authorization section
"""

from google.colab import drive
drive.mount('/content/drive')

!ls
import os
os.chdir("/content/drive/My Drive/Workspace")
!ls

"""## Import library"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

"""## Data Exploration"""

mp_file_path= 'melb_data.csv'
mp_data= pd.read_csv(mp_file_path)
mp_data.describe()

mp_data.columns

mp_data = mp_data.dropna(axis=0)

y= mp_data.Price
mp_features= ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
X= mp_data[mp_features]
X.head()

"""## Creating Model"""

def decTree(max_leaf_nodes,train_X, train_y, val_X, val_y):
  model = DecisionTreeRegressor(max_leaf_nodes= max_leaf_nodes, random_state=0)
  model.fit(train_X, train_y)
  preds_val = model.predict(val_X)
  mae = mean_absolute_error(val_y, preds_val)
  return mae

def randmForest(train_X, train_y, val_X, val_y):
  forest_mp= RandomForestRegressor(random_state=1)
  forest_mp.fit(train_X, train_y)
  forest_prediction= forest_mp.predict(val_X)
  forest_mae= mean_absolute_error(val_y, forest_prediction)
  return forest_mae

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)

print(round(get_mae(500,train_X,train_y,val_X,val_y)))
print(round(randmForest(train_X, train_y, val_X, val_y)))